---------------------------------
-- Notes about database plans  --
---------------------------------
Alright, so I lost the most recent updates while being too brazen with some file cleanup on my computer, and this was the most recent online version. Most of the database ideas are now outdated, and I did quick fixes on some of them before uploading here. Right now, this is in some weird half-state between the csv-file version, the old database version, and the new ideas about the database. Let me clear up how I think the database should work in each step to help guide production.

---------------------------  Home Page  -------------------------------------
On the "home" menu, people are going to enter a game ID and a name to join. 

- This first checks the GameStatus table to see if the status of the game is "waiting". 
- Then, if the game is "waiting", then it'll check the table waitingplayers to see if anybody with the same name is joining the same gameid. 
- If not, add the "name","gameID",and FALSE to add them as a waiting and not the host

For someone hosting a game, they don't have to enter a gameID, and it is generated by the server. 

- A list of taken gameIDs is taken by selecting all gameIDs from the GameStatus table
- A gameID is randomly generated, then incremented until a unique one is found
- The gameID is added to GameStatus as "waiting", and the player is added to WaitingPlayers with their name, the gameID, and TRUE to say they are the host

In both cases, when a name is succesfully chosen, set the javascript variable window.name to their name, and if you ever need their name, you can pull it from there.

----------------------------  Lobby  --------------------------------------------------
In the lobby:

- Check the gameID and the player name against the WaitingPlayers table to see if they are the host or even a part of the game.

When the host presses the start game button:
- Grab a list of players from WaitingPlayers with the appropriate gameID

- Generate a new table with the name being the GameID, and the columns being 
		--"RoundNumber (int, primary ID)","RoundDone (bool)", and one for each playername

- Fill out the table. Round number is auto-incrementing, round done will start as false for all of them, and the player names will be one "rotation" of the player list.
		-- The goal with the "rotation of the player names" thing is so that on any given round, you can check whose work you get to see. 
		
		For example Sarah pings the server for round five. In the row for round five, the Sarah column says "Melinda", so the server responds to Sarah with the data in the Melinda column for Round 4

		Example table:
		
		Round | Done  | Sarah   | Melinda | Jacob   | Sandy   | Maud
		-----------------------------------------------------
		 1    | False | Sarah   | Melinda | Jacob   | Sandy   | Maud
		 2    | False | Maud    | Sarah   | Melinda | Jacob   | Sandy
		 3    | False | Maud    | Sarah   | Melinda | Jacob   | Sandy
		 4    | False | Maud    | Sarah   | Melinda | Jacob   | Sandy
		 5    | False | Maud    | Sarah   | Melinda | Jacob   | Sandy

- Set GameStatus to "playing" for the appropriate gameID

- Delete the current players from the WaitingPlayers table

---------------------------- Gameplay ----------------------------------------
The player should start with their blank textarea to write their text. To keep everything consistent betweendrawings and text, this text is written on a canvas, and the canvas drawing is written to a dataURL (This part already works). When the player submits a piece:

- Ping the database with the round number, your player name, and the dataURL

- The database will replace that entry with your canvas dataURL. During this step, the server should check if all of the player columns have a dataURL in it. If so, set the Done column to true.

- Players continue to ping with the old round number and their player name.

- If the Done column is True for that round, the database checks their column at the next round's row to see who they should be looking at. Using that name, get the dataurl from the old round number at that name's column, and respond to the pinger.
		-- For instance Sarah is done with round one and is constantly pinging with "Sarah, Round 1". When everyone is finished, the database will see Done="TRUE", so it does "SELECT Sarah FROM gameID WHERE Round = 2", and sees "Maud". It then uses that name to do "SELECT Maud FROM gameID WHERE Round = 1" and should find the stuff Maud did in round one. It then responds to Sarah with that dataURL.
		-- Though this seems a bit redundant because Sarah should always recieve from Maud, it provides a consistent spot that the server can always grab it from, because every ping is a different instance of the script. 

- These steps repeat until all rounds are Done, where it sends you to the results screen

------------------------ Results ---------------------------------------------
*Note: this page does not exist yet

This whole page should use the same table as the gameplay bit. Anyone can access this page from, for example "results.php?gid=...". Optionally include ";player=..." to specify a certain player's stack. What it does:

- Select the columns from table <gameID>, and get the player names from this list.

- For each player name, make a rotation of the name stack that starts with their name. For instance, Sarah's stack will be ["Sarah","Melinda","Jacob","Sandy","Maud"], or Jacob's will be ["Jacob","Sandy","Maud","Sarah","Melinda"]

- Create an area for each player, and grab the images one by one. This looks like: 
		For n in sarahStack.length, "SELECT "+sarahStack[n]+" WHERE Round = "+(n+1)+";".
		which evaluates to "SELECT Sarah WHERE Round = 1", "SELECT Melinda WHERE Round = 2" and so on.

- Use the dataURLs to create a gallery (bootstrap maybe?)


Sharing stacks will be made possible by sharing the link, like "chrisgriffin.info/blowingyourfaceoff/results.php?gid=...;player=Sarah" to share Sarah's stack, or just "chrisgriffin.info/blowingyourfaceoff/results.php?gid=..." to share the whole game. A share button should at least copy this link.

Maybe include a saved game table? Basically just two columns, email/username and gameID. "Saving" a game would basically just be adding an entry with the user's identifier and the current gameID. This could be used if you wanted a browse old games feature